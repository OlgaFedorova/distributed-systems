apiVersion: v1
kind: Template
metadata:
  name: container-redis-template
  labels:
    name: redis
  annotations:
    description: Template for the Container redis
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Container redis image stream
      labels:
        name: redis
      name: redis
    spec:
      tags:
        - annotations:
          from:
            kind: DockerImage
            name: "library/redis:6.0"
          name: "6.0"
          importPolicy: {}
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        name: redis
        service: redis
      name: redis
      annotations:
        description: "The Container redis service"
    spec:
      ports:
        - name: 6379-tcp
          port: 6379
          targetPort: 6379
          protocol: TCP  
      selector:
        name: redis
      type: ClusterIP
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: redis
      labels:
        name: redis
      annotations:
        description: "The Container redis deployment configuration"
    spec:
      strategy:
        type: Rolling
        rollingParams:
          timeoutSeconds: 18000
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - redis
            from:
              kind: ImageStreamTag
              name: "redis:6.0"
      replicas: 1
      selector:
        name: redis
        deploymentconfig: redis
      template:
        metadata:
          labels:
            name: redis
            deploymentconfig: redis
        spec:
          containers:
            - name: redis
              image: "library/redis:6.0"
              imagePullPolicy: Always
          ports:
            - containerPort: 6379
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 60
        test: false
      status: {}